digraph {
	"node0" [shape="rect",color="black",label=<y = &quot;b&quot;<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ vid$y: [b]<BR/>vid$x: [PUSHANY] ]]<BR/>}} -&gt; [vid$y]>];
	"node1" [shape="rect",color="gray",label=<strings.Contains(x, &quot;abc&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ vid$y: [b]<BR/>vid$x: [PUSHANY] ]]<BR/>}} -&gt; [vid$x strcontains abc]>];
	"node2" [shape="rect",color="gray",label=<y = +(y, &quot;a&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ vid$y: [a, b, vid$y, vid$y strcat a]<BR/>vid$x: [PUSHANY, a, ab, abc, b, bc, c] ]]<BR/>}} -&gt; [vid$y]>];
	"node3" [shape="rect",color="gray",label=<y = +(y, &quot;a&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ vid$y: [a, b, vid$y, vid$y strcat a]<BR/>vid$x: [PUSHANY] ]]<BR/>}} -&gt; [vid$y]>];
	"node4" [shape="rect",color="gray",label=<no-op<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ vid$x: [PUSHANY]<BR/>vid$y: [a, b, vid$y, vid$y strcat a] ]]<BR/>}} -&gt; [skip]>];
	"node1" -> "node2" [color="blue",style="dashed"];
	"node1" -> "node3" [color="red",style="dashed"];
	"node2" -> "node4" [color="black"];
	"node3" -> "node4" [color="black"];
	"node0" -> "node1" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
