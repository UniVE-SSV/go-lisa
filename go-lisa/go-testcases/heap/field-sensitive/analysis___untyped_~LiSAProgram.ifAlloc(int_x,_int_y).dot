digraph {
	"node0" [shape="rect",color="black",label=<==(x, y)<BR/>{{<BR/>heap [[ [] ]]<BR/>value [[ vid$x: #TOP#<BR/>vid$y: #TOP# ]]<BR/>}} -&gt; [vid$x == vid$y]>];
	"node1" [shape="rect",color="gray",label=<x := nonKeyedLit(Vertex)(1, 2)<BR/>{{<BR/>heap [[ [hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':28:17] ]]<BR/>value [[ hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':28:17[vid$X]: [1, 1]<BR/>hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':28:17[vid$Y]: [2, 2]<BR/>vid$x: #TOP#<BR/>vid$y: #TOP# ]]<BR/>}} -&gt; [vid$x]>];
	"node2" [shape="rect",color="black",peripheries="2",label=<return x::X<BR/>{{<BR/>heap [[ [hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':28:17, hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':28:17[vid$X], hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':30:17, hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':30:17[vid$X]] ]]<BR/>value [[ hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':28:17[vid$X]: [1, 1]<BR/>hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':28:17[vid$Y]: [2, 2]<BR/>hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':30:17[vid$X]: [3, 3]<BR/>hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':30:17[vid$Y]: [4, 4]<BR/>vid$ret_value@ifAlloc: [1, 3]<BR/>vid$x: #TOP#<BR/>vid$y: #TOP# ]]<BR/>}} -&gt; [vid$ret_value@ifAlloc]>];
	"node3" [shape="rect",color="gray",label=<x := nonKeyedLit(Vertex)(3, 4)<BR/>{{<BR/>heap [[ [hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':30:17] ]]<BR/>value [[ hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':30:17[vid$X]: [3, 3]<BR/>hid$pp@'go-testcases/heap/field-sensitive/go-structs.go':30:17[vid$Y]: [4, 4]<BR/>vid$x: #TOP#<BR/>vid$y: #TOP# ]]<BR/>}} -&gt; [vid$x]>];
	"node1" -> "node2" [color="black"];
	"node0" -> "node1" [color="blue",style="dashed"];
	"node0" -> "node3" [color="red",style="dashed"];
	"node3" -> "node2" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
